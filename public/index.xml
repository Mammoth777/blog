<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hoi !</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content on Hoi !</description>
    <image>
      <title>Hoi !</title>
      <url>http://localhost:1313/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.128.1</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Jul 2024 08:27:09 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo &#43; GitHub Pages &#43; Actions 个人博客搭建</title>
      <link>http://localhost:1313/blog/posts/general/%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 04 Jul 2024 08:27:09 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/general/%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%A1%88/</guid>
      <description>发布一个博客， 总共分几步？ 三步。创建博客站点，写博客，发出去。
博客站点就像是一个空壳博客，存在于我们的电脑上 我们需要在这个站点中写文章 写完了不能只有自己看呀， 就需要发布到网上 下面， 把这三步具像化一点～～
1. 【创建博客站点】：通过Hugo生成站点 Hugo 是一个静态网站生成器， 我们需要用它制作一个站点。
1.1 安装Hugo 这里记录下 Windows 和 MacOS 下的安装步骤
1.1.1 Windows 打开命令行， 输入：
winget install Hugo.Hugo.Extended (待验证)
1.1.2 MacOS 安装：brew install hugo 验证： hugo version 看到输出类似这样的版本， 则表示成功： hugo v0.128.1+extended darwin/arm64 BuildDate=2024-07-02T06:46:41Z VendorInfo=brew
1.2 初始化站点 初始化： hugo new site myblog 启动博客： hugo server
2. 【写博客】 这时候我们已经有了一个全新的博客空壳
3. 通过GitHub Pages发布站点 4. 映射到自己的域名 4.1 搞个域名 4.2 配置https FAQ 1. 为什么启动后， 是空白页页面， 报错如下 WARN 2024/07/04 21:05:13 found no layout file for &amp;quot;HTML&amp;quot; for kind &amp;quot;page&amp;quot;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.</description>
    </item>
    <item>
      <title>浏览器事件循环-微任务和宏任务，调用栈，渲染队列：布局，绘制与合成</title>
      <link>http://localhost:1313/blog/posts/frontend/eventloop/</link>
      <pubDate>Fri, 12 Jan 2024 11:15:14 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/frontend/eventloop/</guid>
      <description>翻译计划： 2024.1
此文翻译自： https://blog.xnim.me/event-loop-and-render-queue#heading-task-queue 已经获取作者授权
此文主旨在于关注事件队列， 执行顺序 以及开发者如何优化代码。 完整思路如下： 事件队列 古老的操作系统不支持多线程， 那时候的事件循环就类似这样一个简单的循环:
while (true) { if (execQueue.isNotEmpty()) { execQueue.pop().exec(); } } 在老的操作系统上， 这段代码会疯狂跑满全部cpu。 （真的吗？ &amp;ndash; 年轻的译者注） 现代操作系统调度器非常复杂， 包括优先级，执行队列， 和其他的技术。
我们可以把事件循环理解为一个圆圈，系统就一圈一圈地检查， 有没有待执行的任务 （pending task）。 下面这些行为， 都会在事件循环里生成任务：
script 标签 延迟任务： setTimeout, setInterval, requestIdleCallback 浏览器的事件处理API: click， mousedown, input, blur 等等。 有一些事件是用户初始化的，比如点击事件， tab切换这种 有的事件是来自于代码， 比如 ajax 的响应啥的 promise 状态变化； （关于promise， 可以看这个文章, emmm这篇文章是我准备留给2月份翻译的） DOMMutationObserver, IntersectionObserver 这种 Observer 家族的 RequestAnimationFrame Almost everything we described above is planned through WebAPI (or browserAPI).</description>
    </item>
    <item>
      <title>Test</title>
      <link>http://localhost:1313/blog/posts/bb/test/</link>
      <pubDate>Fri, 12 Aug 2022 11:33:22 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/bb/test/</guid>
      <description>ssss</description>
    </item>
    <item>
      <title>Go 使用 grpc</title>
      <link>http://localhost:1313/blog/posts/golang/grpc-go/</link>
      <pubDate>Fri, 12 Aug 2022 11:15:14 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/golang/grpc-go/</guid>
      <description>快速开始 安装proto-gen-go-grpc插件 go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest 来看看版本
protoc-gen-go-grpc --version protoc-gen-go-grpc 1.1.0 编写proto文件 syntax = &amp;#34;proto3&amp;#34;; package hw; option go_package=&amp;#34;./hello&amp;#34;; // 告诉protoc生成的文件的包名 service Greeter { rpc SayHello (HelloRequest) returns (HelloReply) {} } message HelloRequest { string name = 1; } message HelloReply { string name = 1; } 生成代码 protoc -I=. --go_out=./grpc/service --go-grpc_out=./grpc/service ./grpc/service/hello/helloworld.proto 说明：
go_out: 生成后的*.pb.go文件位置 go-grpc_out: 生成后的*_grpc.pb.go文件位置 -I: 即-IPATH或--proto_path=PATH， 指定搜索路径参数，表示我们在那个路径下搜索.proto文件 </description>
    </item>
    <item>
      <title>BB</title>
      <link>http://localhost:1313/blog/posts/bb/idx/</link>
      <pubDate>Wed, 03 Aug 2022 23:06:30 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/bb/idx/</guid>
      <description>my first bb 我的第一篇随笔</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/blog/about/</link>
      <pubDate>Wed, 03 Aug 2022 22:56:07 +0800</pubDate>
      <guid>http://localhost:1313/blog/about/</guid>
      <description>据村里的老人说， 是一个有趣的男孩子</description>
    </item>
    <item>
      <title>General</title>
      <link>http://localhost:1313/blog/posts/general/idx/</link>
      <pubDate>Wed, 03 Aug 2022 22:55:03 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/general/idx/</guid>
      <description>通用技能</description>
    </item>
    <item>
      <title>Docker</title>
      <link>http://localhost:1313/blog/posts/server/docker/</link>
      <pubDate>Tue, 02 Aug 2022 13:30:26 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/server/docker/</guid>
      <description>docker</description>
    </item>
  </channel>
</rss>
