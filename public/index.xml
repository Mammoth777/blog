<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hoi !</title>
    <link>https://mammoth777.github.io/blog/</link>
    <description>Recent content on Hoi !</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Jan 2024 11:15:14 +0800</lastBuildDate><atom:link href="https://mammoth777.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浏览器事件循环-微任务和宏任务，调用栈，渲染队列：布局，绘制与合成</title>
      <link>https://mammoth777.github.io/blog/posts/frontend/eventloop/</link>
      <pubDate>Fri, 12 Jan 2024 11:15:14 +0800</pubDate>
      
      <guid>https://mammoth777.github.io/blog/posts/frontend/eventloop/</guid>
      <description>翻译计划： 2024.1
  此文翻译自： https://blog.xnim.me/event-loop-and-render-queue#heading-task-queue 已经获取作者授权
 此文主旨在于关注事件队列， 执行顺序 以及开发者如何优化代码。 完整思路如下： 事件队列 古老的操作系统不支持多线程， 那时候的事件循环就类似这样一个简单的循环:
while (true) { if (execQueue.isNotEmpty()) { execQueue.pop().exec(); } } 在老的操作系统上， 这段代码会疯狂跑满全部cpu。 （真的吗？ &amp;ndash; 年轻的译者注） 现代操作系统调度器非常复杂， 包括优先级，执行队列， 和其他的技术。
我们可以把事件循环理解为一个圆圈，系统就一圈一圈地检查， 有没有待执行的任务 （pending task）。 下面这些行为， 都会在事件循环里生成任务：
 script 标签 延迟任务： setTimeout, setInterval, requestIdleCallback 浏览器的事件处理API: click， mousedown, input, blur 等等。  有一些事件是用户初始化的，比如点击事件， tab切换这种 有的事件是来自于代码， 比如 ajax 的响应啥的   promise 状态变化； （关于promise， 可以看这个文章, emmm这篇文章是我准备留给2月份翻译的） DOMMutationObserver, IntersectionObserver 这种 Observer 家族的 RequestAnimationFrame   Almost everything we described above is planned through WebAPI (or browserAPI).</description>
    </item>
    
    <item>
      <title>Go 使用 grpc</title>
      <link>https://mammoth777.github.io/blog/posts/golang/grpc-go/</link>
      <pubDate>Fri, 12 Aug 2022 11:15:14 +0800</pubDate>
      
      <guid>https://mammoth777.github.io/blog/posts/golang/grpc-go/</guid>
      <description>快速开始  安装proto-gen-go-grpc插件  go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest 来看看版本
protoc-gen-go-grpc --version protoc-gen-go-grpc 1.1.0 编写proto文件  syntax = &amp;#34;proto3&amp;#34;;package hw;option go_package=&amp;#34;./hello&amp;#34;; // 告诉protoc生成的文件的包名 service Greeter { rpc SayHello (HelloRequest) returns (HelloReply) {}}message HelloRequest { string name = 1;}message HelloReply { string name = 1;}生成代码  protoc -I=. --go_out=./grpc/service --go-grpc_out=./grpc/service ./grpc/service/hello/helloworld.proto 说明：
 go_out: 生成后的*.pb.go文件位置 go-grpc_out: 生成后的*_grpc.pb.go文件位置 -I: 即-IPATH或--proto_path=PATH， 指定搜索路径参数，表示我们在那个路径下搜索.proto文件  </description>
    </item>
    
    <item>
      <title>BB</title>
      <link>https://mammoth777.github.io/blog/posts/bb/</link>
      <pubDate>Wed, 03 Aug 2022 23:06:30 +0800</pubDate>
      
      <guid>https://mammoth777.github.io/blog/posts/bb/</guid>
      <description>my first bb 我的第一篇随笔</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://mammoth777.github.io/blog/about/</link>
      <pubDate>Wed, 03 Aug 2022 22:56:07 +0800</pubDate>
      
      <guid>https://mammoth777.github.io/blog/about/</guid>
      <description>据村里的老人说， 是一个有趣的男孩子
 </description>
    </item>
    
    <item>
      <title>General</title>
      <link>https://mammoth777.github.io/blog/posts/general/</link>
      <pubDate>Wed, 03 Aug 2022 22:55:03 +0800</pubDate>
      
      <guid>https://mammoth777.github.io/blog/posts/general/</guid>
      <description>通用技能</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://mammoth777.github.io/blog/search/</link>
      <pubDate>Tue, 02 Aug 2022 15:17:31 +0800</pubDate>
      
      <guid>https://mammoth777.github.io/blog/search/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://mammoth777.github.io/blog/posts/server/docker/</link>
      <pubDate>Tue, 02 Aug 2022 13:30:26 +0800</pubDate>
      
      <guid>https://mammoth777.github.io/blog/posts/server/docker/</guid>
      <description>docker</description>
    </item>
    
  </channel>
</rss>
